# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import checkout_pb2 as checkout__pb2


class FraudServiceStub(object):
    """Fraud Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckFraud = channel.unary_unary(
                '/checkout.FraudService/CheckFraud',
                request_serializer=checkout__pb2.OrderRequest.SerializeToString,
                response_deserializer=checkout__pb2.FraudResponse.FromString,
                )


class FraudServiceServicer(object):
    """Fraud Service
    """

    def CheckFraud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FraudServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckFraud': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckFraud,
                    request_deserializer=checkout__pb2.OrderRequest.FromString,
                    response_serializer=checkout__pb2.FraudResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'checkout.FraudService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FraudService(object):
    """Fraud Service
    """

    @staticmethod
    def CheckFraud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/checkout.FraudService/CheckFraud',
            checkout__pb2.OrderRequest.SerializeToString,
            checkout__pb2.FraudResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VerificationServiceStub(object):
    """Verification Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyOrder = channel.unary_unary(
                '/checkout.VerificationService/VerifyOrder',
                request_serializer=checkout__pb2.OrderRequest.SerializeToString,
                response_deserializer=checkout__pb2.VerificationResponse.FromString,
                )


class VerificationServiceServicer(object):
    """Verification Service
    """

    def VerifyOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VerificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyOrder,
                    request_deserializer=checkout__pb2.OrderRequest.FromString,
                    response_serializer=checkout__pb2.VerificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'checkout.VerificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VerificationService(object):
    """Verification Service
    """

    @staticmethod
    def VerifyOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/checkout.VerificationService/VerifyOrder',
            checkout__pb2.OrderRequest.SerializeToString,
            checkout__pb2.VerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SuggestionsServiceStub(object):
    """Suggestions Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSuggestions = channel.unary_unary(
                '/checkout.SuggestionsService/GetSuggestions',
                request_serializer=checkout__pb2.OrderRequest.SerializeToString,
                response_deserializer=checkout__pb2.SuggestionsResponse.FromString,
                )


class SuggestionsServiceServicer(object):
    """Suggestions Service
    """

    def GetSuggestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SuggestionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSuggestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuggestions,
                    request_deserializer=checkout__pb2.OrderRequest.FromString,
                    response_serializer=checkout__pb2.SuggestionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'checkout.SuggestionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SuggestionsService(object):
    """Suggestions Service
    """

    @staticmethod
    def GetSuggestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/checkout.SuggestionsService/GetSuggestions',
            checkout__pb2.OrderRequest.SerializeToString,
            checkout__pb2.SuggestionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
